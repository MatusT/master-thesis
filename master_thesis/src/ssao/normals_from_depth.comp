#version 460

#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "consts.glsl"
#include "common.glsl"

layout(set = 0, binding = 0, std140) uniform Constants
{
    GlobalConstants constants;
};

layout(set = 1, binding = 1) uniform sampler g_PointClampSampler;
layout(set = 1, binding = 2) uniform texture2D g_DepthIn;;

// Output
layout(set = 1, binding = 3, rgba32f) uniform writeonly image2DArray g_PrepareNormals_NormalOutput;

struct PrepareNormalsInputDepths
{
	float depth_10;
	float depth_20;

	float depth_01;
	float depth_11;
	float depth_21;
	float depth_31;

	float depth_02;
	float depth_12;
	float depth_22;
	float depth_32;

	float depth_13;
	float depth_23;
};

vec3 ndc_to_viewspace(vec2 pos, float viewspaceDepth)
{
    return vec3((constants.NDCToViewMul * pos + constants.NDCToViewAdd) * viewspaceDepth, viewspaceDepth);
}

vec4 calculate_edges(float centerZ, float leftZ, float rightZ, float topZ, float bottomZ)
{
    vec4 edgesLRTB = vec4(leftZ, rightZ, topZ, bottomZ) - vec4(centerZ);
    vec4 edgesLRTBSlopeAdjusted = edgesLRTB + edgesLRTB.yxwz;
    edgesLRTB = min(abs(edgesLRTB), abs(edgesLRTBSlopeAdjusted));
    return clamp(vec4(1.3) - (edgesLRTB / vec4(centerZ * 0.04)), vec4(0.0), vec4(1.0));
}

vec3 calculate_normal(const vec4 edgesLRTB, vec3 pixCenterPos, vec3 pixLPos, vec3 pixRPos, vec3 pixTPos, vec3 pixBPos)
{
	// Get this pixel's viewspace normal
	vec4 acceptedNormals = vec4(edgesLRTB.x*edgesLRTB.z, edgesLRTB.z*edgesLRTB.y, edgesLRTB.y*edgesLRTB.w, edgesLRTB.w*edgesLRTB.x);

	pixLPos = normalize(pixLPos - pixCenterPos);
	pixRPos = normalize(pixRPos - pixCenterPos);
	pixTPos = normalize(pixTPos - pixCenterPos);
	pixBPos = normalize(pixBPos - pixCenterPos);

	vec3 pixelNormal = vec3(0, 0, -0.0005);
	pixelNormal += (acceptedNormals.x) * cross(pixLPos, pixTPos);
	pixelNormal += (acceptedNormals.y) * cross(pixTPos, pixRPos);
	pixelNormal += (acceptedNormals.z) * cross(pixRPos, pixBPos);
	pixelNormal += (acceptedNormals.w) * cross(pixBPos, pixLPos);
	pixelNormal = normalize(pixelNormal);

	return pixelNormal;
}

float sceenspace_to_viewspace_depth(float screenDepth)
{
    float depthLinearizeMul = constants.DepthUnpackConsts.x;
    float depthLinearizeAdd = constants.DepthUnpackConsts.y;

    return depthLinearizeMul / (depthLinearizeAdd - screenDepth);
}

void prepare_normals(PrepareNormalsInputDepths depths, vec2 uv, vec2 pixelSize, ivec2 normalCoord)
{
	vec3 p_10 = ndc_to_viewspace(uv + vec2(+0.0f, -1.0f) * pixelSize, depths.depth_10);
	vec3 p_20 = ndc_to_viewspace(uv + vec2(+1.0f, -1.0f) * pixelSize, depths.depth_20);

	vec3 p_01 = ndc_to_viewspace(uv + vec2(-1.0f, +0.0f) * pixelSize, depths.depth_01);
	vec3 p_11 = ndc_to_viewspace(uv + vec2(+0.0f, +0.0f) * pixelSize, depths.depth_11);
	vec3 p_21 = ndc_to_viewspace(uv + vec2(+1.0f, +0.0f) * pixelSize, depths.depth_21);
	vec3 p_31 = ndc_to_viewspace(uv + vec2(+2.0f, +0.0f) * pixelSize, depths.depth_31);

	vec3 p_02 = ndc_to_viewspace(uv + vec2(-1.0f, +1.0f) * pixelSize, depths.depth_02);
	vec3 p_12 = ndc_to_viewspace(uv + vec2(+0.0f, +1.0f) * pixelSize, depths.depth_12);
	vec3 p_22 = ndc_to_viewspace(uv + vec2(+1.0f, +1.0f) * pixelSize, depths.depth_22);
	vec3 p_32 = ndc_to_viewspace(uv + vec2(+2.0f, +1.0f) * pixelSize, depths.depth_32);

	vec3 p_13 = ndc_to_viewspace(uv + vec2(+0.0f, +2.0f) * pixelSize, depths.depth_13);
	vec3 p_23 = ndc_to_viewspace(uv + vec2(+1.0f, +2.0f) * pixelSize, depths.depth_23);

	vec4 edges_11 = calculate_edges(p_11.z, p_01.z, p_21.z, p_10.z, p_12.z);
	vec4 edges_21 = calculate_edges(p_21.z, p_11.z, p_31.z, p_20.z, p_22.z);
	vec4 edges_12 = calculate_edges(p_12.z, p_02.z, p_22.z, p_11.z, p_13.z);
	vec4 edges_22 = calculate_edges(p_22.z, p_12.z, p_32.z, p_21.z, p_23.z);

	vec3 norm_11 = calculate_normal(edges_11, p_11, p_01, p_21, p_10, p_12);
	vec3 norm_21 = calculate_normal(edges_21, p_21, p_11, p_31, p_20, p_22);
	vec3 norm_12 = calculate_normal(edges_12, p_12, p_02, p_22, p_11, p_13);
	vec3 norm_22 = calculate_normal(edges_22, p_22, p_12, p_32, p_21, p_23);

	imageStore(g_PrepareNormals_NormalOutput, ivec3(normalCoord, 0), vec4(norm_11, 1.0f));
    imageStore(g_PrepareNormals_NormalOutput, ivec3(normalCoord, 1), vec4(norm_21, 1.0f));
    imageStore(g_PrepareNormals_NormalOutput, ivec3(normalCoord, 2), vec4(norm_12, 1.0f));
    imageStore(g_PrepareNormals_NormalOutput, ivec3(normalCoord, 3), vec4(norm_22, 1.0f));
}

void main()
{
	ivec2 tid = ivec2(gl_GlobalInvocationID.xy);

	ivec2 depthCoord = 2 * tid + constants.DepthBufferOffset;
	vec2 depthBufferUV = (vec2(depthCoord)-0.5f) * constants.DepthBufferInverseDimensions;
	vec4 samples_00 = textureGatherOffset(sampler2D(g_DepthIn, g_PointClampSampler), depthBufferUV, ivec2(0, 0), 0);
	vec4 samples_10 = textureGatherOffset(sampler2D(g_DepthIn, g_PointClampSampler), depthBufferUV, ivec2(2, 0), 0);
	vec4 samples_01 = textureGatherOffset(sampler2D(g_DepthIn, g_PointClampSampler), depthBufferUV, ivec2(0, 2), 0);
	vec4 samples_11 = textureGatherOffset(sampler2D(g_DepthIn, g_PointClampSampler), depthBufferUV, ivec2(2, 2), 0);

	PrepareNormalsInputDepths depths;

	depths.depth_10 = sceenspace_to_viewspace_depth(samples_00.z);
	depths.depth_20 = sceenspace_to_viewspace_depth(samples_10.w);

	depths.depth_01 = sceenspace_to_viewspace_depth(samples_00.x);
	depths.depth_11 = sceenspace_to_viewspace_depth(samples_00.y);
	depths.depth_21 = sceenspace_to_viewspace_depth(samples_10.x);
	depths.depth_31 = sceenspace_to_viewspace_depth(samples_10.y);

	depths.depth_02 = sceenspace_to_viewspace_depth(samples_01.w);
	depths.depth_12 = sceenspace_to_viewspace_depth(samples_01.z);
	depths.depth_22 = sceenspace_to_viewspace_depth(samples_11.w);
	depths.depth_32 = sceenspace_to_viewspace_depth(samples_11.z);

	depths.depth_13 = sceenspace_to_viewspace_depth(samples_01.y);
	depths.depth_23 = sceenspace_to_viewspace_depth(samples_11.x);

	// use unused samples to make sure compiler doesn't overlap memory and put a sync
	// between loads
	float epsilon = (samples_00.w + samples_10.z + samples_01.x + samples_11.y) * 1e-20f;

	vec2 pixelSize = constants.OutputBufferInverseDimensions;
	vec2 uv = (vec2(2 * tid) + 0.5f + epsilon) * constants.OutputBufferInverseDimensions;

	prepare_normals(depths, uv, pixelSize, tid);
}