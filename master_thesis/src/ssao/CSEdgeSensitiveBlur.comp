#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_AMD_gpu_shader_half_float: enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#include "consts.glsl"
#include "common.glsl"


layout(set = 0, binding = 0, std140) uniform Constants
{
    GlobalConstants constants;
};

layout(set = 0, binding = 1) uniform sampler g_PointMirrorSampler;

layout(set = 1, binding = 0) uniform texture2D g_BlurInput;
layout(set = 1, binding = 1, rg32f) uniform writeonly image2D g_BlurOutput;

struct Edges_4
{
    f16vec4 left;
    f16vec4 right;
    f16vec4 top;
    f16vec4 bottom;
};

shared uint s_BlurF16Front_4[34][50];
shared uint s_BlurF16Back_4[34][50];

uint PackFloat16(f16vec2 v)
{
    vec2 _1159 = vec2(v);
    return packHalf2x16(vec2(_1159.x, _1159.y));
}

f16vec2 UnpackFloat16(uint a)
{
    uvec2 _1183 = uvec2(a & 65535u, a >> (16u & 31u));
    vec2 tmp = vec2(unpackHalf2x16(_1183.x).x, unpackHalf2x16(_1183.y).x);
    return f16vec2(tmp);
}

Edges_4 UnpackEdgesFloat16_4(f16vec4 _packedVal)
{
    f16vec4 sharpness = f16vec4(constants.InvSharpness);

    uvec4 packedVal = uvec4(vec4(_packedVal * float16_t(255.5)));
    Edges_4 result;
	result.left = f16vec4(clamp(f16vec4((packedVal >> 6) & 0x03) / f16vec4(3.0) + sharpness, 0.0, 1.0));
	result.right = f16vec4(clamp(f16vec4((packedVal >> 4) & 0x03) / f16vec4(3.0)  + sharpness, 0.0, 1.0));
	result.top = f16vec4(clamp(f16vec4((packedVal >> 2) & 0x03) / f16vec4(3.0)  + sharpness, 0.0, 1.0));
	result.bottom = f16vec4(clamp(f16vec4((packedVal >> 0) & 0x03) / f16vec4(3.0)  + sharpness, 0.0, 1.0));
    return result;
}

f16vec4 CalcBlurredSampleF16_4(f16vec4 packedEdges, f16vec4 centre, f16vec4 left, f16vec4 right, f16vec4 top, f16vec4 bottom)
{
    f16vec4 sum = f16vec4(vec4(centre) * 0.5);
    f16vec4 weight = f16vec4(float16_t(0.5));
    f16vec4 packedVal = packedEdges;
    Edges_4 edges = UnpackEdgesFloat16_4(packedVal);
    sum += (left * edges.left);
    weight += edges.left;
    sum += (right * edges.right);
    weight += edges.right;
    sum += (top * edges.top);
    weight += edges.top;
    sum += (bottom * edges.bottom);
    weight += edges.bottom;
    return sum / weight;
}

void LDSEdgeSensitiveBlur(uint blurPasses, uvec2 tid, uvec2 gid)
{
    ivec2 imageCoord = ivec2(((gid * (uvec2(ivec2(64, 48)) - uvec2(2u * blurPasses))) + (uvec2(ivec2(4, 3)) * tid)) - uvec2(blurPasses));
    ivec2 bufferCoord = ivec2((uvec2(ivec2(2, 3)) * tid) + uvec2(1u));
    vec2 _input[4][3];
    for (int y = 0; y < 3; y++)
    {
        for (int x = 0; x < 4; x++)
        {
            _input[x][y] = textureLod(sampler2D(g_BlurInput, g_PointMirrorSampler), (vec2(imageCoord + ivec2(x, y)) + vec2(0.5)) * constants.SSAOBufferInverseDimensions, 0.0).xy;
        }
    }
    f16vec4 packedEdges[1][3];
    for (int y_1 = 0; y_1 < 3; y_1++)
    {
        for (int x_1 = 0; x_1 < 1; x_1++)
        {
            f16vec2 ssaoVals = f16vec2(float16_t(_input[(4 * x_1) + 0][y_1].x), float16_t(_input[(4 * x_1) + 1][y_1].x));
            f16vec2 v = ssaoVals;
            s_BlurF16Front_4[(bufferCoord.x + (2 * x_1)) + 0][bufferCoord.y + y_1] = PackFloat16(v);
            ssaoVals = f16vec2(float16_t(_input[(4 * x_1) + 2][y_1].x), float16_t(_input[(4 * x_1) + 3][y_1].x));
            f16vec2 v_1 = ssaoVals;
            s_BlurF16Front_4[(bufferCoord.x + (2 * x_1)) + 1][bufferCoord.y + y_1] = PackFloat16(v_1);
            packedEdges[x_1][y_1] = f16vec4(float16_t(_input[(4 * x_1) + 0][y_1].y), float16_t(_input[(4 * x_1) + 1][y_1].y), float16_t(_input[(4 * x_1) + 2][y_1].y), float16_t(_input[(4 * x_1) + 3][y_1].y));
        }
    }
    barrier();
    for (int i = 0; uint(i) < ((blurPasses + 1u) / 2u); i++)
    {
        for (int y_2 = 0; y_2 < 3; y_2++)
        {
            for (int x_2 = 0; x_2 < 1; x_2++)
            {
                ivec2 c = bufferCoord + ivec2(2 * x_2, y_2);
                uint a = s_BlurF16Front_4[c.x + 0][c.y + 0];
                uint a_1 = s_BlurF16Front_4[c.x + 1][c.y + 0];
                f16vec4 centre = f16vec4(UnpackFloat16(a), UnpackFloat16(a_1));
                uint a_2 = s_BlurF16Front_4[c.x + 0][c.y - 1];
                uint a_3 = s_BlurF16Front_4[c.x + 1][c.y - 1];
                f16vec4 top = f16vec4(UnpackFloat16(a_2), UnpackFloat16(a_3));
                uint a_4 = s_BlurF16Front_4[c.x + 0][c.y + 1];
                uint a_5 = s_BlurF16Front_4[c.x + 1][c.y + 1];
                f16vec4 bottom = f16vec4(UnpackFloat16(a_4), UnpackFloat16(a_5));
                uint a_6 = s_BlurF16Front_4[c.x - 1][c.y + 0];
                f16vec2 tmp = UnpackFloat16(a_6);
                f16vec4 left = f16vec4(tmp.y, centre.xyz);
                uint a_7 = s_BlurF16Front_4[c.x + 2][c.y + 0];
                tmp = UnpackFloat16(a_7);
                f16vec4 right = f16vec4(centre.yzw, tmp.x);
                f16vec4 packedEdges = packedEdges[x_2][y_2];
                f16vec4 tmp_4 = CalcBlurredSampleF16_4(packedEdges, centre, left, right, top, bottom);
                f16vec2 v_2 = tmp_4.xy;
                s_BlurF16Back_4[c.x + 0][c.y] = PackFloat16(v_2);
                f16vec2 v_3 = tmp_4.zw;
                s_BlurF16Back_4[c.x + 1][c.y] = PackFloat16(v_3);
            }
        }
        barrier();
        if (uint((2 * i) + 1) < blurPasses)
        {
            for (int y_3 = 0; y_3 < 3; y_3++)
            {
                for (int x_3 = 0; x_3 < 1; x_3++)
                {
                    ivec2 c_1 = bufferCoord + ivec2(2 * x_3, y_3);
                    uint a_8 = s_BlurF16Back_4[c_1.x + 0][c_1.y + 0];
                    uint a_9 = s_BlurF16Back_4[c_1.x + 1][c_1.y + 0];
                    f16vec4 centre_1 = f16vec4(UnpackFloat16(a_8), UnpackFloat16(a_9));
                    uint a_10 = s_BlurF16Back_4[c_1.x + 0][c_1.y - 1];
                    uint a_11 = s_BlurF16Back_4[c_1.x + 1][c_1.y - 1];
                    f16vec4 top_1 = f16vec4(UnpackFloat16(a_10), UnpackFloat16(a_11));
                    uint a_12 = s_BlurF16Back_4[c_1.x + 0][c_1.y + 1];
                    uint a_13 = s_BlurF16Back_4[c_1.x + 1][c_1.y + 1];
                    f16vec4 bottom_1 = f16vec4(UnpackFloat16(a_12), UnpackFloat16(a_13));
                    uint a_14 = s_BlurF16Back_4[c_1.x - 1][c_1.y + 0];
                    f16vec2 tmp_1 = UnpackFloat16(a_14);
                    f16vec4 left_1 = f16vec4(tmp_1.y, centre_1.xyz);
                    uint a_15 = s_BlurF16Back_4[c_1.x + 2][c_1.y + 0];
                    tmp_1 = UnpackFloat16(a_15);
                    f16vec4 right_1 = f16vec4(centre_1.yzw, tmp_1.x);
                    f16vec4 packedEdges_1 = packedEdges[x_3][y_3];
                    f16vec4 tmp_4_1 = CalcBlurredSampleF16_4(packedEdges_1, centre_1, left_1, right_1, top_1, bottom_1);
                    f16vec2 v_4 = tmp_4_1.xy;
                    s_BlurF16Front_4[c_1.x + 0][c_1.y] = PackFloat16(v_4);
                    f16vec2 v_5 = tmp_4_1.zw;
                    s_BlurF16Front_4[c_1.x + 1][c_1.y] = PackFloat16(v_5);
                }
            }
            barrier();
        }
    }
    f16vec4 ssaoVal;
    for (int y_4 = 0; y_4 < 3; y_4++)
    {
        int outputY = int((3u * tid.y) + uint(y_4));
        if ((blurPasses <= uint(outputY)) && (uint(outputY) < (48u - blurPasses)))
        {
            for (int x_4 = 0; x_4 < 1; x_4++)
            {
                int outputX = int((4u * tid.x) + uint(4 * x_4));
                if ((blurPasses % 2u) == 0u)
                {
                    uint a_16 = s_BlurF16Front_4[bufferCoord.x + x_4][bufferCoord.y + y_4];
                    uint a_17 = s_BlurF16Front_4[(bufferCoord.x + x_4) + 1][bufferCoord.y + y_4];
                    ssaoVal = f16vec4(UnpackFloat16(a_16), UnpackFloat16(a_17));
                }
                else
                {
                    uint a_18 = s_BlurF16Back_4[bufferCoord.x + x_4][bufferCoord.y + y_4];
                    uint a_19 = s_BlurF16Back_4[(bufferCoord.x + x_4) + 1][bufferCoord.y + y_4];
                    ssaoVal = f16vec4(UnpackFloat16(a_18), UnpackFloat16(a_19));
                }
                if ((blurPasses <= uint(outputX)) && (uint(outputX) < (64u - blurPasses)))
                {
                    imageStore(g_BlurOutput, ivec2(uvec2(imageCoord + ivec2(4 * x_4, y_4))), vec2(float(ssaoVal.x)).xyyy);
                }
                outputX++;
                if ((blurPasses <= uint(outputX)) && (uint(outputX) < (64u - blurPasses)))
                {
                    imageStore(g_BlurOutput, ivec2(uvec2(imageCoord + ivec2((4 * x_4) + 1, y_4))), vec2(float(ssaoVal.y)).xyyy);
                }
                outputX++;
                if ((blurPasses <= uint(outputX)) && (uint(outputX) < (64u - blurPasses)))
                {
                    imageStore(g_BlurOutput, ivec2(uvec2(imageCoord + ivec2((4 * x_4) + 2, y_4))), vec2(float(ssaoVal.z)).xyyy);
                }
                outputX++;
                if ((blurPasses <= uint(outputX)) && (uint(outputX) < (64u - blurPasses)))
                {
                    imageStore(g_BlurOutput, ivec2(uvec2(imageCoord + ivec2((4 * x_4) + 3, y_4))), vec2(float(ssaoVal.w)).xyyy);
                }
            }
        }
    }
}

void main()
{
    uvec2 tid = gl_LocalInvocationID.xy;
    uvec2 gid = gl_WorkGroupID.xy;

    uint blurPasses = 4u;
    LDSEdgeSensitiveBlur(blurPasses, tid, gid);
}

