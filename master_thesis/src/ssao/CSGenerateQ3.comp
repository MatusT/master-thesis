#version 460
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "consts.glsl"
#include "common.glsl"

struct BilateralBufferVal
{
    uint packedDepths;
    uint packedSsaoVals;
};

struct SSAOSampleData
{
    vec2 uvOffset;
    float mipLevel;
    float weightMod;
};

struct SSAOHits
{
    vec3 hits[2];
    float weightMod;
};

layout(set = 0, binding = 0, std140) uniform Constants
{
    GlobalConstants constants;
};

layout(set = 0, binding = 1) uniform sampler g_PointMirrorSampler;
layout(set = 0, binding = 2) uniform sampler g_ViewspaceDepthTapSampler;
layout(set = 0, binding = 3, rgba32f) uniform readonly image2DArray g_DeinterlacedNormals;

layout(set = 1, binding = 0, std140) uniform PassConstants
{
    PerPassConstants pass_constants;
};
layout(set = 1, binding = 1) uniform texture2D g_ViewspaceDepthSource;
layout(set = 1, binding = 2, rg32f) uniform image2D g_SSAOOutput;

vec3 NDCToViewspace(vec2 pos, float viewspaceDepth)
{
    return vec3((constants.NDCToViewMul * pos + constants.NDCToViewAdd) * viewspaceDepth, viewspaceDepth);
}

vec3 DepthBufferUVToViewspace(vec2 pos, float viewspaceDepth)
{
    return vec3((constants.DepthBufferUVToViewMul * pos + constants.DepthBufferUVToViewAdd) * viewspaceDepth, viewspaceDepth);
}

void CalculateRadiusParameters(float pixCenterLength, vec2 pixelDirRBViewspaceSizeAtCenterZ, out float pixLookupRadiusMod, inout float effectRadius, out float falloffCalcMulSq)
{
    effectRadius = constants.EffectRadius;
    float tooCloseLimitMod = clamp(pixCenterLength * constants.EffectSamplingRadiusNearLimitRec, 0.0, 1.0) * 0.8 + 0.2;
    effectRadius *= tooCloseLimitMod;
    pixLookupRadiusMod = (0.85 * effectRadius) / pixelDirRBViewspaceSizeAtCenterZ.x;
    falloffCalcMulSq = (-1.0) / (effectRadius * effectRadius);
}

vec4 CalculateEdges(float centerZ, float leftZ, float rightZ, float topZ, float bottomZ)
{
    vec4 edgesLRTB = vec4(leftZ, rightZ, topZ, bottomZ) - vec4(centerZ);
    vec4 edgesLRTBSlopeAdjusted = edgesLRTB + edgesLRTB.yxwz;
    edgesLRTB = min(abs(edgesLRTB), abs(edgesLRTBSlopeAdjusted));
    return clamp(vec4(1.3) - (edgesLRTB / vec4(centerZ * 0.04)), vec4(0.0), vec4(1.0));
}

float CalculatePixelObscurance(vec3 pixelNormal, vec3 hitDelta, float falloffCalcMulSq)
{
    float lengthSq = dot(hitDelta, hitDelta);
    float NdotD = dot(pixelNormal, hitDelta) / sqrt(lengthSq);

    float falloffMult = max(0.0, (lengthSq * falloffCalcMulSq) + 1.0);

    return max(0.0, NdotD - constants.EffectHorizonAngleThreshold) * falloffMult;
}

void SSAOTapInner(inout float obscuranceSum, inout float weightSum, vec2 samplingUV, float mipLevel, vec3 pixCenterPos, vec3 negViewspaceDir, vec3 pixelNormal, float falloffCalcMulSq, float weightMod, int dbgTapIndex)
{
    float viewspaceSampleZ = textureLod(sampler2D(g_ViewspaceDepthSource, g_ViewspaceDepthTapSampler), samplingUV, mipLevel).x;
    vec2 pos = samplingUV;
    float viewspaceDepth = viewspaceSampleZ;
    vec3 hitPos = DepthBufferUVToViewspace(pos, viewspaceDepth);
    vec3 hitDelta = hitPos - pixCenterPos;

    float obscurance = CalculatePixelObscurance(pixelNormal, hitDelta, falloffCalcMulSq);
    float weight = 1.0;
    // if (qualityLevel >= 1)
    {
        float reduct = max(0.0, -hitDelta.z);
        reduct = clamp((reduct * constants.NegRecEffectRadius) + 2.0, 0.0, 1.0);
        weight = (0.60000002384185791015625 * reduct) + 0.4000000059604644775390625;
    }
    weight *= weightMod;
    obscuranceSum += (obscurance * weight);
    weightSum += weight;
}

void SSAOTap(inout float obscuranceSum, inout float weightSum, int tapIndex, mat2 rotScale, vec3 pixCenterPos, vec3 negViewspaceDir, vec3 pixelNormal, vec2 normalizedScreenPos, vec2 depthBufferUV, float mipOffset, float falloffCalcMulSq, vec2 normXY, float normXYLength)
{
	vec2  sampleOffset;
	float samplePow2Len;
	float weightMod = 1.0;

	// patterns
	{
		vec4 newSample = g_samplePatternMain[tapIndex];
		sampleOffset = newSample.xy * rotScale;
		samplePow2Len = newSample.w;                      // precalculated, same as: samplePow2Len = log2( length( newSample.xy ) );
		weightMod *= newSample.z;
	}

	// snap to pixel center (more correct obscurance math, avoids artifacts)
	sampleOffset = round(sampleOffset);

	// calculate MIP based on the sample distance from the centre, similar to as described 
	// in http://graphics.cs.williams.edu/papers/SAOHPG12/.
	float mipLevel = samplePow2Len + mipOffset;

	vec2 samplingUV = sampleOffset * constants.DeinterleavedDepthBufferInverseDimensions + depthBufferUV;

	SSAOTapInner(obscuranceSum, weightSum, samplingUV, mipLevel, pixCenterPos, negViewspaceDir, pixelNormal, falloffCalcMulSq, weightMod, tapIndex * 2);

	// for the second tap, just use the mirrored offset
	vec2 sampleOffsetMirroredUV = -sampleOffset;

	// snap to pixel center (more correct obscurance math, avoids artifacts)
	vec2 samplingMirroredUV = sampleOffsetMirroredUV * constants.DeinterleavedDepthBufferInverseDimensions + depthBufferUV;

	SSAOTapInner(obscuranceSum, weightSum, samplingMirroredUV, mipLevel, pixCenterPos, negViewspaceDir, pixelNormal, falloffCalcMulSq, weightMod, tapIndex * 2 + 1);
}

void GenerateSSAOShadowsInternal(inout float outShadowTerm, inout vec4 outEdges, inout float outWeight, vec2 SVPos)
{
	vec2 SVPosRounded = trunc(SVPos);
	uvec2 SVPosui = uvec2(SVPosRounded); 

	const int numberOfTaps = 12;
	float pixZ, pixLZ, pixTZ, pixRZ, pixBZ;

	vec2 depthBufferUV = (SVPos + 0.5f) * constants.DeinterleavedDepthBufferInverseDimensions + constants.DeinterleavedDepthBufferNormalisedOffset;
    vec4 valuesUL = textureGatherOffset(sampler2D(g_ViewspaceDepthSource, g_PointMirrorSampler), depthBufferUV, ivec2(-1, -1), 0);
    vec4 valuesBR = textureGather(sampler2D(g_ViewspaceDepthSource, g_PointMirrorSampler), depthBufferUV, 0);

	// get this pixel's viewspace depth
	pixZ = valuesUL.y;

	// get left right top bottom neighbouring pixels for edge detection (gets compiled out on qualityLevel == 0)
	pixLZ = valuesUL.x;
	pixTZ = valuesUL.z;
	pixRZ = valuesBR.z;
	pixBZ = valuesBR.x;

	vec2 normalizedScreenPos = (SVPosRounded + 0.5f) * constants.SSAOBufferInverseDimensions;
	vec3 pixCenterPos = NDCToViewspace(normalizedScreenPos, pixZ); // g

	// Load this pixel's viewspace normal
	ivec3 normalCoord = ivec3(SVPosui, pass_constants.PassIndex);
	vec3 pixelNormal = normalize(imageLoad(g_DeinterlacedNormals, normalCoord).xyz);

	// optimized approximation of:  vec2 pixelDirRBViewspaceSizeAtCenterZ = NDCToViewspace( normalizedScreenPos.xy + constants._ViewportPixelSize.xy, pixCenterPos.z ).xy - pixCenterPos.xy;
	// const vec2 pixelDirRBViewspaceSizeAtCenterZ = pixCenterPos.z * constants.NDCToViewMul * constants.Viewport2xPixelSize;
	const vec2 pixelDirRBViewspaceSizeAtCenterZ = pixCenterPos.z * constants.NDCToViewMul * constants.SSAOBufferInverseDimensions;

	float pixLookupRadiusMod;
	float falloffCalcMulSq;

	// calculate effect radius and fit our screen sampling pattern inside it
	float effectViewspaceRadius;
	CalculateRadiusParameters(length(pixCenterPos), pixelDirRBViewspaceSizeAtCenterZ, pixLookupRadiusMod, effectViewspaceRadius, falloffCalcMulSq);

	// calculate samples rotation/scaling
	mat2 rotScale;
	{
		// load & update pseudo-random rotation matrix
		uint pseudoRandomIndex = uint(SVPosRounded.y * 2 + SVPosRounded.x) % 5;
		vec4 rs = pass_constants.PatternRotScaleMatrices[pseudoRandomIndex];
	    rotScale = mat2(vec2(rs.x * pixLookupRadiusMod, rs.y * pixLookupRadiusMod), vec2(rs.z * pixLookupRadiusMod, rs.w * pixLookupRadiusMod));
    }

	// the main obscurance & sample weight storage
	float obscuranceSum = 0.0;
	float weightSum = 0.0;

	// edge mask for between this and left/right/top/bottom neighbour pixels - not used in quality level 0 so initialize to "no edge" (1 is no edge, 0 is edge)
	vec4 edgesLRTB = vec4(1.0, 1.0, 1.0, 1.0);

	// Move center pixel slightly towards camera to avoid imprecision artifacts due to using of 16bit depth buffer; a lot smaller offsets needed when using 32bit floats
	pixCenterPos *= constants.DepthPrecisionOffsetMod;

    edgesLRTB = CalculateEdges(pixZ, pixLZ, pixRZ, pixTZ, pixBZ);

	// adds a more high definition sharp effect, which gets blurred out (reuses left/right/top/bottom samples that we used for edge detection)
	// if (qualityLevel >= SSAO_DETAIL_AO_ENABLE_AT_QUALITY_PRESET)
	{
        // approximate neighbouring pixels positions (actually just deltas or "positions - pixCenterPos" )
        vec3 viewspaceDirZNormalized = vec3(pixCenterPos.xy / pixCenterPos.zz, 1.0);

        vec3 pixLDelta = vec3(-pixelDirRBViewspaceSizeAtCenterZ.x, 0.0, 0.0) + viewspaceDirZNormalized * (pixLZ - pixCenterPos.z);
        vec3 pixRDelta = vec3(+pixelDirRBViewspaceSizeAtCenterZ.x, 0.0, 0.0) + viewspaceDirZNormalized * (pixRZ - pixCenterPos.z);
        vec3 pixTDelta = vec3(0.0, -pixelDirRBViewspaceSizeAtCenterZ.y, 0.0) + viewspaceDirZNormalized * (pixTZ - pixCenterPos.z);
        vec3 pixBDelta = vec3(0.0, +pixelDirRBViewspaceSizeAtCenterZ.y, 0.0) + viewspaceDirZNormalized * (pixBZ - pixCenterPos.z);

        const float rangeReductionConst = 4.0f;                         // this is to avoid various artifacts
        const float modifiedFalloffCalcMulSq = rangeReductionConst * falloffCalcMulSq;

        vec4 additionalObscurance;
        additionalObscurance.x = CalculatePixelObscurance(pixelNormal, pixLDelta, modifiedFalloffCalcMulSq);
        additionalObscurance.y = CalculatePixelObscurance(pixelNormal, pixRDelta, modifiedFalloffCalcMulSq);
        additionalObscurance.z = CalculatePixelObscurance(pixelNormal, pixTDelta, modifiedFalloffCalcMulSq);
        additionalObscurance.w = CalculatePixelObscurance(pixelNormal, pixBDelta, modifiedFalloffCalcMulSq);

        obscuranceSum += constants.DetailAOStrength * dot(additionalObscurance, edgesLRTB);
	}

	// Sharp normals also create edges - but this adds to the cost as well
	// if (qualityLevel >= SSAO_NORMAL_BASED_EDGES_ENABLE_AT_QUALITY_PRESET)
	{
		vec3 neighbourNormalL = imageLoad(g_DeinterlacedNormals, normalCoord + ivec3(-1, +0, 0)).xyz;
		vec3 neighbourNormalR = imageLoad(g_DeinterlacedNormals, normalCoord + ivec3(+1, +0, 0)).xyz;
		vec3 neighbourNormalT = imageLoad(g_DeinterlacedNormals, normalCoord + ivec3(+0, -1, 0)).xyz;
		vec3 neighbourNormalB = imageLoad(g_DeinterlacedNormals, normalCoord + ivec3(+0, +1, 0)).xyz;
		
		const float dotThreshold = SSAO_NORMAL_BASED_EDGES_DOT_THRESHOLD;

		vec4 normalEdgesLRTB;
		normalEdgesLRTB.x = clamp((dot(pixelNormal, neighbourNormalL) + dotThreshold), 0.0, 1.0);
		normalEdgesLRTB.y = clamp((dot(pixelNormal, neighbourNormalR) + dotThreshold), 0.0, 1.0);
		normalEdgesLRTB.z = clamp((dot(pixelNormal, neighbourNormalT) + dotThreshold), 0.0, 1.0);
		normalEdgesLRTB.w = clamp((dot(pixelNormal, neighbourNormalB) + dotThreshold), 0.0, 1.0);

		edgesLRTB *= normalEdgesLRTB;
	}

	const float globalMipOffset = SSAO_DEPTH_MIPS_GLOBAL_OFFSET;
	float mipOffset = log2(pixLookupRadiusMod) + globalMipOffset;

	// Used to tilt the second set of samples so that the disk is effectively rotated by the normal
	// effective at removing one set of artifacts, but too expensive for lower quality settings
	vec2 normXY = vec2(pixelNormal.x, pixelNormal.y);
	float normXYLength = length(normXY);
	normXY /= vec2(normXYLength, -normXYLength);
	normXYLength *= SSAO_TILT_SAMPLES_AMOUNT;

	const vec3 negViewspaceDir = -normalize(pixCenterPos);

	// standard, non-adaptive approach
	for (int i = 0; i < numberOfTaps; i++)
	{
		SSAOTap(obscuranceSum, weightSum, i, rotScale, pixCenterPos, negViewspaceDir, pixelNormal, normalizedScreenPos, depthBufferUV, mipOffset, falloffCalcMulSq, normXY, normXYLength);
	}

	// calculate weighted average
	float obscurance = obscuranceSum / weightSum;

	// calculate fadeout (1 close, gradient, 0 far)
	float fadeOut = saturate(pixCenterPos.z * constants.EffectFadeOutMul + constants.EffectFadeOutAdd);

	// Reduce the SSAO shadowing if we're on the edge to remove artifacts on edges (we don't care for the lower quality one)
	// if (qualityLevel >= SSAO_DEPTH_BASED_EDGES_ENABLE_AT_QUALITY_PRESET)
	{
		// float edgeCount = dot( 1.0-edgesLRTB, vec4( 1.0, 1.0, 1.0, 1.0 ) );

		// when there's more than 2 opposite edges, start fading out the occlusion to reduce aliasing artifacts
		float edgeFadeoutFactor = saturate((1.0 - edgesLRTB.x - edgesLRTB.y) * 0.35) + saturate((1.0 - edgesLRTB.z - edgesLRTB.w) * 0.35);

		// (experimental) if you want to reduce the effect next to any edge
		// edgeFadeoutFactor += 0.1 * saturate( dot( 1 - edgesLRTB, vec4( 1, 1, 1, 1 ) ) );

		fadeOut *= saturate(1.0 - edgeFadeoutFactor);
	}

	// same as a bove, but a lot more conservative version
	// fadeOut *= saturate( dot( edgesLRTB, vec4( 0.9, 0.9, 0.9, 0.9 ) ) - 2.6 );

	// strength
	obscurance = constants.EffectShadowStrength * obscurance;

	// clamp
	obscurance = min(obscurance, constants.EffectShadowClamp);

	// fadeout
	// obscurance *= fadeOut;

	// conceptually switch to occlusion with the meaning being visibility (grows with visibility, occlusion == 1 implies full visibility), 
	// to be in line with what is more commonly used.
	float occlusion = 1.0 - obscurance;

	// modify the gradient
	// note: this cannot be moved to a later pass because of loss of precision after storing in the render target
	occlusion = pow(clamp(occlusion, 0.0, 1.0), constants.EffectShadowPow);

	// outputs!
	outShadowTerm = occlusion;    // Our final 'occlusion' term (0 means fully occluded, 1 means fully lit)
	outEdges = edgesLRTB;    // These are used to prevent blurring across edges, 1 means no edge, 0 means edge, 0.5 means half way there, etc.
	outWeight = weightSum;
}

float PackEdges(inout vec4 edgesLRTB)
{
    edgesLRTB = round(clamp(edgesLRTB, vec4(0.0), vec4(1.0)) * 3.05);
    return dot(edgesLRTB, vec4(64.0 / 255.0, 16.0 / 255.0, 4.0 / 255.0, 1.0 / 255.0));
}

void main()
{
    float outShadowTerm;
    vec4  outEdges;
    float outWeight;
    GenerateSSAOShadowsInternal(outShadowTerm, outEdges, outWeight, gl_GlobalInvocationID.xy);
    vec2 out0;
    out0.x = outShadowTerm;
    out0.y = PackEdges(outEdges);

    imageStore(g_SSAOOutput, ivec2(gl_GlobalInvocationID.xy), out0.xyyy);
}

